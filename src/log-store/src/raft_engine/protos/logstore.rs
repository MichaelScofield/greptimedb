// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `logstore.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct EntryImpl {
    // message fields
    pub id: u64,
    pub namespace_id: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntryImpl {
    fn default() -> &'a EntryImpl {
        <EntryImpl as ::protobuf::Message>::default_instance()
    }
}

impl EntryImpl {
    pub fn new() -> EntryImpl {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint64 namespace_id = 2;


    pub fn get_namespace_id(&self) -> u64 {
        self.namespace_id
    }
    pub fn clear_namespace_id(&mut self) {
        self.namespace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_namespace_id(&mut self, v: u64) {
        self.namespace_id = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EntryImpl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.namespace_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.namespace_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.namespace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.namespace_id != 0 {
            os.write_uint64(2, self.namespace_id)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntryImpl {
        EntryImpl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &EntryImpl| { &m.id },
                |m: &mut EntryImpl| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "namespace_id",
                |m: &EntryImpl| { &m.namespace_id },
                |m: &mut EntryImpl| { &mut m.namespace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &EntryImpl| { &m.data },
                |m: &mut EntryImpl| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EntryImpl>(
                "EntryImpl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EntryImpl {
        static instance: ::protobuf::rt::LazyV2<EntryImpl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EntryImpl::new)
    }
}

impl ::protobuf::Clear for EntryImpl {
    fn clear(&mut self) {
        self.id = 0;
        self.namespace_id = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntryImpl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryImpl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogStoreState {
    // message fields
    pub last_index: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogStoreState {
    fn default() -> &'a LogStoreState {
        <LogStoreState as ::protobuf::Message>::default_instance()
    }
}

impl LogStoreState {
    pub fn new() -> LogStoreState {
        ::std::default::Default::default()
    }

    // uint64 last_index = 1;


    pub fn get_last_index(&self) -> u64 {
        self.last_index
    }
    pub fn clear_last_index(&mut self) {
        self.last_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_index(&mut self, v: u64) {
        self.last_index = v;
    }
}

impl ::protobuf::Message for LogStoreState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.last_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.last_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.last_index != 0 {
            os.write_uint64(1, self.last_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogStoreState {
        LogStoreState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_index",
                |m: &LogStoreState| { &m.last_index },
                |m: &mut LogStoreState| { &mut m.last_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogStoreState>(
                "LogStoreState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogStoreState {
        static instance: ::protobuf::rt::LazyV2<LogStoreState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogStoreState::new)
    }
}

impl ::protobuf::Clear for LogStoreState {
    fn clear(&mut self) {
        self.last_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogStoreState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogStoreState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NamespaceImpl {
    // message fields
    pub id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamespaceImpl {
    fn default() -> &'a NamespaceImpl {
        <NamespaceImpl as ::protobuf::Message>::default_instance()
    }
}

impl NamespaceImpl {
    pub fn new() -> NamespaceImpl {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }
}

impl ::protobuf::Message for NamespaceImpl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamespaceImpl {
        NamespaceImpl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &NamespaceImpl| { &m.id },
                |m: &mut NamespaceImpl| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamespaceImpl>(
                "NamespaceImpl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamespaceImpl {
        static instance: ::protobuf::rt::LazyV2<NamespaceImpl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamespaceImpl::new)
    }
}

impl ::protobuf::Clear for NamespaceImpl {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamespaceImpl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamespaceImpl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0elogstore.proto\x12\x08logstore\"R\n\tEntryImpl\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x04R\x02id\x12!\n\x0cnamespace_id\x18\x02\x20\x01(\x04R\
    \x0bnamespaceId\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\".\n\rLo\
    gStoreState\x12\x1d\n\nlast_index\x18\x01\x20\x01(\x04R\tlastIndex\"\x1f\
    \n\rNamespaceImpl\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02idJ\xf7\x02\n\
    \x06\x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x11\n\n\n\x02\x04\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x04\x08\x11\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x10\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x05\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x0e\x0f\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\t\x15\
    \n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x07\x02\x11\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x08\x0c\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x07\x0f\x10\n\n\n\x02\x04\x01\x12\x04\n\0\x0c\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\n\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0b\x02\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x0b\t\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0b\x16\x17\n\n\n\x02\x04\x02\x12\x04\x0e\0\x10\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\
    \x02\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x0f\t\x0b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x0f\x0e\x0fb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
